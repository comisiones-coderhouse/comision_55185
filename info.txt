Librerias de maquetacion :

- tailwindcss

- bootstrap / react-bootstrap / reactsrap
- ant design
- material ui


Reglas de los componentes : 

1- Todos son funciones
2- Todos arrancan en mayuscula
3- Todos tienen un return
4- Todos tienen un solo elemento de retorno
5- Todos los componentes tienen la capacidad de recibir props
6- Todos los componentes tienen la capacidad de tener un estado





function Contador (props) {
  const saludar = () => {
    console.log('Adentro de contador')
  }

  return (
    <div>
      <h3>Contador</h3>
      {/* <button id='btn' onClick={() => { console.log('Hola ') }}>click</button> */}
      <button onClick={saludar}>click</button>
      {/* <button onClick={props.saludar}>componente padre</button> */}
    </div>
  )
}
export default Contador


HOOKS : Son funciones diversas que le dan "funcionalidades" nuevas a un componente. Todos los hooks arrancan con la palabra "use" y siempre se usan dentro de un componente pero nunca dentro de un condicional o un ciclo.

- useState : 1 param (valor inicial | any ) - Retorna : 2 elementos (valor, funcion)
- useRef : 1 param (valor inicial | null) - Retorna : 1 elemento (valor)
- useEffect : 2 param
- useContext : 1 param
- useReducer : 2 param
....


JSX

if / else  => operador ternario

//Sentencia 
if (condicion) {
  return 0
} else {
  return 1
}


//Expresion
condicion ? 0 : 1




&& ||


for / .forEach => .map





import { useState } from "react"

function Container() {

    const [contador, setContador] = useState(0)
    const [nombres, setNombres] = useState(["Juan", "Pedro", "Maria", "Jose"])

    const handleSumar = () => {
        setContador(contador + 1)
    }

    /* document.body.addEventListener("click",()=>{
        console.log("click en body")
        })
    */

    //fetch("https://jsonplaceholder.typicode.com/users")

    return (
        <div>
            <h3>Contador: {contador}</h3>
            <button onClick={handleSumar}>sumar</button>

            {/* Ejemplo operador ternario (reemplazo de condicional if/else) */}

            {/* <button>{if(contador > 1){ return "verificado" } }</button> */}
            <button>{contador > 1 ? "verificado" : "no verificado"}</button>
            <button className={`${contador > 1 ? "bg-red-500" : "bg-blue-500"}`}>cambio de clases</button>


            {/* Ejemplo iteracion (reemplazo de forEach) */}
            {/* nombres.forEach() */}
            {nombres.map(function (item, indice) {
                return (
                    <p key={indice}>{item}</p>
                )
            })}

        </div>
    )
}

export default Container




PATRONES DE DISEÃ‘O

1 - Container(estados,efectos,logicas,acciones) / Presentational (props,vista)
2 - Children / Render Props
3 - Provider(estados,efectos,logicas,acciones) / Consumer (props,vista)


fetch()
producto = {
    id: 1,
    nombre: "producto 1",
    precio: 1000,
    stock: 10
}


<article flex-row>
    <h3>producto.nombre</h3>
    <p>producto.precio</p>
    <p>producto.stock</p>
</article>


<article flex-colum>
    <h3>producto.nombre</h3>
  
    <p>producto.precio x cant</p>
    <p>producto.stock</p>
</article>


<article flex-colum>
    <h3>producto.nombre</h3>
    <p>producto.precio </p>
    <p>producto.description</p>
    <p>producto.stock</p>
</article>






CONCEPTOS CLAVE : 



- componentes 1

  function Foo(){
    return (<div>)
  }





- Props  2

  function Foo(Props){
    return (<div>)
  }




- State  3

  function Foo(Props){
    
    const [state,setState] = useState(0)

    return (<div>)
  }







- Effect 4

  function Foo(Props){
    
    const [state,setState] = useState(0)

    useEffect(()=>{
      fetch()
    },[])

    return (<div>)

  }



- Patron Container / Presentational 5

  function Container(Props){
    
    const [state,setState] = useState(0)

    useEffect(()=>{
      fetch()
    },[])

    return (<Presentational state={state}>)

  }

  function Presentational(Props){
    return (<div>)
  }

  

- Promises 6

const promesa = new Promise((res,rej)=>{ 
  //res("Hola")
  rej("Error de rechazo")
 })

promesa
.then((resultado)=>{ console.log(resultado) })
.catch((error)=>{ console.log(error) })
.finally(()=>{ console.log("Soy el finally") })












HTTP/S

Promise : son objetos que vienen con metodos para saber cuando algo termino de ejecutarse o no.



async function getProductos (){
  try {
    const productos = await fetch()
    console.log(productos)
  } catch (error) {
    console.log(error)
  }
}

getProductos()




console.log(productos) //Promise{}






const cache = caches.open()

cache
.then((resultado)=>{})
.catch((error)=>{})
.finally(()=>{})


console.log(cache)//Promise{}





const promesa = new Promise((res,rej)=>{ 

  //res("Hola")
  rej("Error de rechazo")
 })

promesa
.then((resultado)=>{ console.log(resultado) })
.catch((error)=>{ console.log(error) })
.finally(()=>{ console.log("Soy el finally") })



SPA : Single Page Aplication




SEGUNDA PRE ENTREGA : 


(Implementacion vieja)
index.js : arranque de la app
- App.js : componente principal
- NavBar : la barra de navegacion superior
- CartWidget : el icono del carrito
- ItemListContainer : el que consigue la info de los productos (recibia un prop greeting y lo mostraba en pantalla)


- ItemListContainer : deja de recibir el prop y genera su propia informacion  (estado y efectos)
- ItemList : Es un iterador de array. presentacional asi que recibe props
- Item : Es un item de la lista. presentacional asi que recibe props


let productos =  []

fetch()
.then((resultado)=>{ productos = resultado })

productos.map(producto=>{})


- ItemDetailContainer : no recibe props y genera su propia informacion  (estado y efectos)
- ItemDetail : Muestra el detalle de un producto solo. presentacional asi que recibe props

let producto =  {}

fetch()
.then((resultado)=>{ producto = resultado })

producto.price

- ItemCount



DE LA LIBRERIA : 

- BrowserRouter : envuelve toda la app
- Routes : Obligatorio porque sino fallan las rutas
- Route : 

    - path : "/" - muestra todos los productos de todas las cateogiras sin filtrar el array de productos (ItemListContainer)
    - path : "/category/:id" - muesta todos los productos de una categoria sola filtrando el array de productos (ItemListContainer)
    - path : "/item/:id" - muestra el detalle de un producto solo (ItemDetailContainer)


- Link/NavLink : reemplaza al <a> para que no recargue la pagina

    - uno en el brand (en el titulo del header/navbar) que apunte al home "/"
    - uno en cada producto en pantalla (osea en Item.js) que apunte al detalle de ese producto "/item/:id"
    - uno en cada categoria en pantalla (osea en navbar.js) que apunte a esa categoria  "/category/:id"

  
Plantilla de Promise

Esto es el ejemplo de como crear una promesa a mano para simular un pedido a una API (Mock Async)


const promesa = new Promise((res,rej)=>{ 

  //hacer resolver la promesa despues de 2 segundos
  //res(arrayProdIniciales)

 })


 .then((respuestaApi)=>{
  //console.log(respuestaApi)
 })
 .catch(()=>{})



 State Uplifting 

1 - Crear un estado en el componente padre (podria ser el contexto tambien a gran escala*)
2 - Crear una funcion que modifique ese estado en el componente padre (*)
3 - Pasar esa funcion y/o estado como prop/contexto al componente hijo
4 - Ejecutar esa funcion en el componente hijo mediante un evento cualquiera 
5 - A la funcion del paso 4 se le pueden pasar parametros, osea variables que podrian estar en el hijo
6 - Se reciben esos parametros finalmente en la funcion original del paso 2


Patron Provider


1 - Creo un contexto con createContext()
2 - Le saco de adentro el Provider
3 - Creo un componente mio que tenga adentro el Provider del paso 2 (de esta manera, mi componente va a ser el responsable del contexto y no se lo delego al resto de la app)
4 - El componente del paso 3 tiene que recibir props, sobre todo uno llamado children que lo va a mostrar en su vista
5 - Dentro del Provider del paso 2, le configuro un prop llamado value que le asigna el valor al contexto (osea las "variables globales")
6 - Envuelvo el resto de la app dentro del componente que hice en el paso 3



Como Leer un Contexto desde un componente cualquiera

1 - Importo el contexto
2 - Importo el hook useContext
3 - Uso el contexto de paso 1 como parametro del hook useContext, eso me da el valor del contexto actualizado





HoC : High Order Component





CRUD / ABM  :  Create Read Update Delete / Alta Baja Modificacion


BASES DE DATOS RELACIONALES(SQL) / NO RELACIONALES(NotOnlySQL)

- SQL : MySQL, MariaDB, PostgreSQL, Oracle, SQL Server
- NoSQL : MongoDB , Cassandra , CouchDB , Redis , Firebase  



Dinamica de consultas : 

1 - te conectas al servidor :  initializeApp / app
2 - estableces sobre que base de datos vas a trabajar : getFirestore / db
3 - estableces sobre que coleccion/es vas a trabajar : collection 
4 - haces la consulta : getDocs / getDoc / addDoc / updateDoc / deleteDoc



       const productosCollection = collection(db,"productos")
        
        const consulta = getDocs(productosCollection)

        consulta
        .then((resultado) => {
            //El resultado de una consulta a Firestore es un objeto que representa los datos guardados, no son los datos en si
            //entonces recorro el array de documentos representados

            const productos = resultado.docs.map(doc=>{
                const producto = doc.data()
                producto.id = doc.id
                return producto
            }) 
            setProductos(productos)
            setLoading(false)
        })
        .catch((error) => {
            console.log("Algo salio mal!")
            console.log(error)
        })



BUILD & DEPLOY

Build : Compilacion final antes de subir los archivos al servidor web
Deploy : Subir los archivos al servidor web